<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".ttg.cs" #>
<# 
    string[] itemNames={"Item1","Item2","Item3"};
    const int generateCount=2;
#>
// <auto-generated />

#nullable enable
<# if (generateCount > 2) { #>

using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;

namespace Trarizon.Library.Functional;
public static partial class Either
{
    [DoesNotReturn]
    internal static void ThrowInvalidTag() => throw new InvalidOperationException("Invalid tag value");
}

<# } #>
<# for (int count = 3; count <= generateCount; count++) { #>
public readonly struct Either<<#= string.Join(", ", G.TypeNames(count))#>>
{
    private readonly byte _tag;
<# for (int i = 0; i < count; i++) {  #>
    internal readonly <#= G.TypeName(i) #>? <#= G.FieldName(i) #>;
<# } #>

    #region Accessors

<# for (int i = 0; i < count; i++) { #>
    [MemberNotNullWhen(true, nameof(<#= G.FieldName(i) #>))]
    [MemberNotNullWhen(false, <#= string.Join(", ", G.FieldNames(count).Where(v => v != G.FieldName(i)).Select(x => $"nameof({x})")) #>)]
    public bool Is<#= G.PropName(i) #> => _tag == <#= i #>;

    public <#= G.TypeName(i) #> <#= G.PropName(i) #> => <#= G.FieldName(i) #>!;

    public <#= G.TypeName(i) #> Get<#= G.PropName(i) #>OrDefault() => <#= G.FieldName(i) #>!;

    [MemberNotNullWhen(true, nameof(<#= G.FieldName(i) #>))]
    public bool TryGet<#= G.PropName(i) #>([MaybeNullWhen(false)] out <#= G.TypeName(i) #> value)
    {
        value = <#= G.FieldName(i) #>;
        return Is<#= G.PropName(i) #>;
    }

<#  } #>
    #endregion

    #region Creators

    private Either(byte tag, <#= string.Join(", ", G.TypeNames(count).Zip(G.VarNames(count), (t, v) => $"{t}? {v}")) #>)
        => (_tag, <#= string.Join(", ", G.FieldNames(count)) #>) = (tag, <#= string.Join(", ", G.VarNames(count)) #>);

<# for (int i = 0; i < count; i++) { #>
    public Either(<#= G.TypeName(i) #> <#= G.VarName(i) #>) : this(<#= i #>, <#= string.Join(", ", G.VarNames(count).Select((x, idx) => i == idx ? x : "default")) #>) { }

    public static implicit operator Either<<#= string.Join(",  ", G.TypeNames(count)) #>>(<#= G.TypeName(i) #> <#= G.VarName(i) #>) => new(<#= G.VarName(i) #>);

<#  } #>
    #endregion

    #region Converters

    public TResult Match<TResult>(<#= string.Join(", ", G.TypeNames(count).Zip(G.VarNames(count), (t, v) => $"Func<{t}, TResult> {v}Selector")) #>)
    {
        switch (_tag) {
<# for (int i = 0; i < count; i++) { #>
            case <#= i #>: 
                Debug.Assert(Is<#= G.PropName(i) #>);
                return <#= G.VarName(i) #>Selector.Invoke(<#= G.FieldName(i) #>!);
<# } #>
            default: 
                Either.ThrowInvalidTag();
                return default!;
        }
    }

    public void Match(<#= string.Join(", ", G.TypeNames(count).Zip(G.VarNames(count), (t, v) => $"Action<{t}>? {v}Selector")) #>)
    {
        switch (_tag) {
<# for (int i = 0; i < count; i++) { #>
            case <#= i #>:
                Debug.Assert(Is<#= G.PropName(i) #>);
                <#= G.VarName(i) #>Selector?.Invoke(<#= G.FieldName(i) #>!);
                return;
<# } #>
            default: 
                Either.ThrowInvalidTag();
                return;
        }
    }

<# for (int i = 0; i < count; i++) { #>
    public Either<<#= string.Join(", ", G.TypeNames(count).Select((x, idx) => idx != i ? x : "TNew")) #>> Select<#= G.PropName(i) #><TNew>(Func<<#= G.TypeName(i) #>, TNew> selector)
    {
        switch (_tag) {
<# for (int j = 0; j < count; j++) { #>
            case <#= j #>:
                Debug.Assert(Is<#= G.PropName(j) #>);
                return <#= i == j ? $"new(selector({G.FieldName(j)}!))" : $"new({G.FieldName(j)}!)" #>;
<# } #>
            default: 
                Either.ThrowInvalidTag();
                return default!;
        }
    }

<# } #>
<# for (int i = 0; i < count; i++) { #>
    public Either<<#= string.Join(", ", G.TypeNames(count).Select((x, idx) => idx != i ? x : "TNew")) #>> Bind<#= G.PropName(i) #><TNew>(Func<<#= G.TypeName(i) #>, Either<<#= string.Join(", ", G.TypeNames(count).Select((x, idx) => idx != i ? x : "TNew")) #>>> selector)
    {
        switch (_tag) {
<# for (int j = 0; j < count; j++) { #>
            case <#= j #>:
                Debug.Assert(Is<#= G.PropName(j) #>);
                return <#= i == j ? $"selector({G.FieldName(j)}!)" : $"new({G.FieldName(j)}!)" #>;
<# } #>
            default: 
                Either.ThrowInvalidTag();
                return default!;
        } 
    }

<# } #>
    #endregion

    public override string ToString()
    {
        switch (_tag) {
<# for (int i = 0; i < count; i++) { #>
            case <#= i #>:
                Debug.Assert(Is<#= G.PropName(i) #>);
                return <#= G.FieldName(i) #>!.ToString() ?? string.Empty;
<# } #>
            default: 
                Either.ThrowInvalidTag();
                return default!;
        }
    }
}

<# }  #>
<#+ 
static class G {
    public static string TypeName(int i) => $"T{i + 1}";
    public static IEnumerable<string> TypeNames(int count) => Enumerable.Range(0, count).Select(TypeName);
    public static string FieldName(int i) => $"_item{i + 1}";
    public static IEnumerable<string> FieldNames(int count) => Enumerable.Range(0, count).Select(FieldName);
    public static string PropName(int i) => $"Item{i + 1}";
    public static string VarName(int i) => $"item{i + 1}";
    public static IEnumerable<string> VarNames(int count) => Enumerable.Range(0, count).Select(VarName);
}
#>