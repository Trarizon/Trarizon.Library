using Microsoft.CodeAnalysis;
using System.Reflection;
using Trarizon.Library.GeneratorToolkit.CSharp;

namespace Trarizon.Library.SourceGeneration;
internal static class Literals
{
    public const string Library_Namespace = "Trarizon.Library";

    public const string Category = $"{Library_Namespace}.SourceGenerator";
    public const string Generators_Namespace = $"{Category}.Generators";

    public const string Generated_Namespace = $"{Library_Namespace}.Generated";
    public const string CodeAnalysis_Namespace = $"{Library_Namespace}.CodeAnalysis";
    public const string CodeAnalysis_MemberAccess_Namespace = $"{CodeAnalysis_Namespace}.MemberAccess";
    public const string CodeGeneration_Namespace = $"{Library_Namespace}.CodeGeneration";

    public static readonly string GeneratedCodeAttribute_Tool_Argument = Assembly.GetExecutingAssembly().GetName().Name;
    public static readonly string GeneratedCodeAttribute_Version_Argument = Assembly.GetExecutingAssembly().GetName().Version.ToString();

    public static readonly string GeneratedCodeAttributeList_Code = $"[global::{CodeFactory.GeneratedCodeAttribute(GeneratedCodeAttribute_Tool_Argument, GeneratedCodeAttribute_Version_Argument)}]";
    public const string AutoGenerated_TopTrivia_Code = "// <auto-generated />";

    #region DiagnosticIds

    public const string FriendAccessAnalyzer_Id = "FA";
    public const string BackingFieldAccessAnalyzer_Id = "BFA";

    public const string SingletonGenerator_Id = "SGLT";

    #endregion

    #region Diagnostics

    public static readonly DiagnosticDescriptor Diagnostic_InvalidIdentifier_0Identifiers = new(
        "TRA0001",
        nameof(Diagnostic_InvalidIdentifier_0Identifiers),
        "Invalid identifier(s): {0}",
        Category,
        DiagnosticSeverity.Error,
        true);
    #endregion
}
