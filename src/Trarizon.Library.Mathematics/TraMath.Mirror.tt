<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".ttg.cs" #>
<#
    var nums = new (string Name, bool IsInt, bool IsUnsigned, int Size)[] {
        new ("short"  ,true  ,false ,sizeof(short) ),
        new ("ushort" ,true  ,true  ,sizeof(ushort)),
        new ("int"    ,true  ,false ,sizeof(int)   ),
        new ("uint"   ,true  ,true  ,sizeof(uint)  ),
        new ("long"   ,true  ,false ,sizeof(long)  ),
        new ("ulong"  ,true  ,true  ,sizeof(ulong) ),
        new ("float"  ,false ,false ,sizeof(float) ),
        new ("double" ,false ,false,sizeof(double)),
    };
#>
/// <auto-generated />

namespace Trarizon.Library.Mathematics;
public static partial class TraMath
{
#if NETSTANDARD

    #region GCD / LCM

<# foreach(var num in nums.Where(n => n.IsInt && !n.IsUnsigned && n.Size >= 4)) { #>
    #region For <#= num.Name #>

    public static <#= num.Name #> GreatestCommonDivisor(<#= num.Name #> left, <#= num.Name #> right)
    {
        while (right != 0) {
            var tmp = left;
            left = right;
            right = tmp % right;
        }
        return left;
    }

    public static <#= num.Name #> LeastCommonMultiple(<#= num.Name #> left, <#= num.Name #> right)
        => left * right / GreatestCommonDivisor(left, right);

    #endregion

<# } #>
    #endregion
    
    #region Map

<# foreach(var num in nums.Where(n => !n.IsInt)) { #>
    #region For <#= num.Name #>

    /// <summary>
    /// Linear normalize value into [0,1]
    /// </summary>
    public static <#= num.Name #> Normalize(<#= num.Name #> min, <#= num.Name #> max, <#= num.Name #> value)
    {
        if (min == max)
            return 0;

        return Clamp((value - min) / (max - min), 0f, 1f);
    }

    /// <summary>
    /// Linear normalize value without clamp the result into [0, 1]
    /// <br/>
    /// eg in range [5,10], 15 result in 5, 0 result in -1
    /// </summary>
    public static <#= num.Name #> NormalizeUnclamped(<#= num.Name #> min, <#= num.Name #> max, <#= num.Name #> value)
    {
        if (min == max)
            return 0;
        return (value - min) / (max - min);
    }

    /// <summary>
    /// Linear map a value from [<paramref name="fromMin"/>, <paramref name="fromMax"/>] 
    /// to [<paramref name="toMin"/>, <paramref name="toMax"/>]. The method does not clamp value
    /// </summary>
    public static <#= num.Name #> MapTo(<#= num.Name #> value, <#= num.Name #> fromMin, <#= num.Name #> fromMax, <#= num.Name #> toMin, <#= num.Name #> toMax)
    {
        var lerp = (value - fromMin) / (fromMax - fromMin);
        return (toMax - toMin) * lerp + toMin;
    }

    public static <#= num.Name #> MapToClamped(<#= num.Name #> value, <#= num.Name #> fromMin, <#= num.Name #> fromMax, <#= num.Name #> toMin, <#= num.Name #> toMax)
    {
        var lerp = (value - fromMin) / (fromMax - fromMin);
        return Clamp((toMax - toMin) * lerp + toMin, toMin, toMax);
    }

    #endregion

<# } #>
    #endregion

    #region MinMax

<# foreach(var num in nums) { #>
    #region For <#= num.Name #>

    /// <summary>
    /// Returns min, max in one time
    /// </summary>
    /// <returns>
    /// If <paramref name="left"/> equals <paramref name="right"/>, the return value is (<paramref name="left"/>, <paramref name="right"/>),
    /// else Min is the less one
    /// </returns>
    public static (<#= num.Name #> Min, <#= num.Name #> Max) MinMax(<#= num.Name #> left, <#= num.Name #> right)
    {
        if (left <= right)
            return (left, right);
        else
            return (right, left);
    }

    #endregion

<# } #>
    #endregion

#endif
}
