// <auto-generated />

namespace Trarizon.Library.Mathematics;
public static partial class TraMath
{
#if NETSTANDARD

    #region GCD / LCM

    #region For int

    public static int GreatestCommonDivisor(int left, int right)
    {
        while (right != 0) {
            var tmp = left;
            left = right;
            right = tmp % right;
        }
        return left;
    }

    public static int LeastCommonMultiple(int left, int right)
        => left * right / GreatestCommonDivisor(left, right);

    #endregion

    #region For long

    public static long GreatestCommonDivisor(long left, long right)
    {
        while (right != 0) {
            var tmp = left;
            left = right;
            right = tmp % right;
        }
        return left;
    }

    public static long LeastCommonMultiple(long left, long right)
        => left * right / GreatestCommonDivisor(left, right);

    #endregion

    #endregion
    
    #region Map

    #region For float

    /// <summary>
    /// Linear normalize value into [0,1]
    /// </summary>
    public static float Normalize(float min, float max, float value)
    {
        if (min == max)
            return 0;

        return Clamp((value - min) / (max - min), 0f, 1f);
    }

    /// <summary>
    /// Linear normalize value without clamp the result into [0, 1]
    /// <br/>
    /// eg in range [5,10], 15 result in 5, 0 result in -1
    /// </summary>
    public static float NormalizeUnclamped(float min, float max, float value)
    {
        if (min == max)
            return 0;
        return (value - min) / (max - min);
    }

    /// <summary>
    /// Linear map a value from [<paramref name="fromMin"/>, <paramref name="fromMax"/>] 
    /// to [<paramref name="toMin"/>, <paramref name="toMax"/>]. The method does not clamp value
    /// </summary>
    public static float MapTo(float value, float fromMin, float fromMax, float toMin, float toMax)
    {
        var lerp = (value - fromMin) / (fromMax - fromMin);
        return (toMax - toMin) * lerp + toMin;
    }

    public static float MapToClamped(float value, float fromMin, float fromMax, float toMin, float toMax)
    {
        var lerp = (value - fromMin) / (fromMax - fromMin);
        return Clamp((toMax - toMin) * lerp + toMin, toMin, toMax);
    }

    #endregion

    #region For double

    /// <summary>
    /// Linear normalize value into [0,1]
    /// </summary>
    public static double Normalize(double min, double max, double value)
    {
        if (min == max)
            return 0;

        return Clamp((value - min) / (max - min), 0f, 1f);
    }

    /// <summary>
    /// Linear normalize value without clamp the result into [0, 1]
    /// <br/>
    /// eg in range [5,10], 15 result in 5, 0 result in -1
    /// </summary>
    public static double NormalizeUnclamped(double min, double max, double value)
    {
        if (min == max)
            return 0;
        return (value - min) / (max - min);
    }

    /// <summary>
    /// Linear map a value from [<paramref name="fromMin"/>, <paramref name="fromMax"/>] 
    /// to [<paramref name="toMin"/>, <paramref name="toMax"/>]. The method does not clamp value
    /// </summary>
    public static double MapTo(double value, double fromMin, double fromMax, double toMin, double toMax)
    {
        var lerp = (value - fromMin) / (fromMax - fromMin);
        return (toMax - toMin) * lerp + toMin;
    }

    public static double MapToClamped(double value, double fromMin, double fromMax, double toMin, double toMax)
    {
        var lerp = (value - fromMin) / (fromMax - fromMin);
        return Clamp((toMax - toMin) * lerp + toMin, toMin, toMax);
    }

    #endregion

    #endregion

    #region MinMax

    #region For short

    /// <summary>
    /// Returns min, max in one time
    /// </summary>
    /// <returns>
    /// If <paramref name="left"/> equals <paramref name="right"/>, the return value is (<paramref name="left"/>, <paramref name="right"/>),
    /// else Min is the less one
    /// </returns>
    public static (short Min, short Max) MinMax(short left, short right)
    {
        if (left <= right)
            return (left, right);
        else
            return (right, left);
    }

    #endregion

    #region For ushort

    /// <summary>
    /// Returns min, max in one time
    /// </summary>
    /// <returns>
    /// If <paramref name="left"/> equals <paramref name="right"/>, the return value is (<paramref name="left"/>, <paramref name="right"/>),
    /// else Min is the less one
    /// </returns>
    public static (ushort Min, ushort Max) MinMax(ushort left, ushort right)
    {
        if (left <= right)
            return (left, right);
        else
            return (right, left);
    }

    #endregion

    #region For int

    /// <summary>
    /// Returns min, max in one time
    /// </summary>
    /// <returns>
    /// If <paramref name="left"/> equals <paramref name="right"/>, the return value is (<paramref name="left"/>, <paramref name="right"/>),
    /// else Min is the less one
    /// </returns>
    public static (int Min, int Max) MinMax(int left, int right)
    {
        if (left <= right)
            return (left, right);
        else
            return (right, left);
    }

    #endregion

    #region For uint

    /// <summary>
    /// Returns min, max in one time
    /// </summary>
    /// <returns>
    /// If <paramref name="left"/> equals <paramref name="right"/>, the return value is (<paramref name="left"/>, <paramref name="right"/>),
    /// else Min is the less one
    /// </returns>
    public static (uint Min, uint Max) MinMax(uint left, uint right)
    {
        if (left <= right)
            return (left, right);
        else
            return (right, left);
    }

    #endregion

    #region For long

    /// <summary>
    /// Returns min, max in one time
    /// </summary>
    /// <returns>
    /// If <paramref name="left"/> equals <paramref name="right"/>, the return value is (<paramref name="left"/>, <paramref name="right"/>),
    /// else Min is the less one
    /// </returns>
    public static (long Min, long Max) MinMax(long left, long right)
    {
        if (left <= right)
            return (left, right);
        else
            return (right, left);
    }

    #endregion

    #region For ulong

    /// <summary>
    /// Returns min, max in one time
    /// </summary>
    /// <returns>
    /// If <paramref name="left"/> equals <paramref name="right"/>, the return value is (<paramref name="left"/>, <paramref name="right"/>),
    /// else Min is the less one
    /// </returns>
    public static (ulong Min, ulong Max) MinMax(ulong left, ulong right)
    {
        if (left <= right)
            return (left, right);
        else
            return (right, left);
    }

    #endregion

    #region For float

    /// <summary>
    /// Returns min, max in one time
    /// </summary>
    /// <returns>
    /// If <paramref name="left"/> equals <paramref name="right"/>, the return value is (<paramref name="left"/>, <paramref name="right"/>),
    /// else Min is the less one
    /// </returns>
    public static (float Min, float Max) MinMax(float left, float right)
    {
        if (left <= right)
            return (left, right);
        else
            return (right, left);
    }

    #endregion

    #region For double

    /// <summary>
    /// Returns min, max in one time
    /// </summary>
    /// <returns>
    /// If <paramref name="left"/> equals <paramref name="right"/>, the return value is (<paramref name="left"/>, <paramref name="right"/>),
    /// else Min is the less one
    /// </returns>
    public static (double Min, double Max) MinMax(double left, double right)
    {
        if (left <= right)
            return (left, right);
        else
            return (right, left);
    }

    #endregion

    #endregion

#endif
}
